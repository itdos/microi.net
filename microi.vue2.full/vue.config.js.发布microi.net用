'use strict'
//发布microi.net用！！！
//这个文件其实就是webpack.config.js
const path = require('path')
const defaultSettings = require('./src/settings.js')
const UglifyJSPlugin = require('uglifyjs-webpack-plugin')
var webpack = require('webpack')
function resolve(dir) {
  return path.join(__dirname, dir)
}
const name = 'microi.net';//defaultSettings.title || 'Loading...' // page title
//以下为MonacoEditor需要
const MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');
//----

// If your port is set to 80,
// use administrator privileges to execute the command line.
// For example, Mac: sudo npm run
// You can change the port by the following method:
// port = 9527 npm run dev OR npm run dev --port = 9527
const port = process.env.port || process.env.npm_config_port || 2009 // dev port
const NODE_ENV = process.env.NODE_ENV;
// All configuration item explanations can be find in https://cli.vuejs.org/config/
module.exports = {
  // 配置入口文件
  // pages: {
  //   index: {
  //     entry: 'src/views/diy/index.js',
  //     // template: 'public/index.html',
  //     filename: 'microi.net.js',
  //     // title: 'microi.net'
  //   }
  // },
  // optimization:{
  //   minimize:true
  // },
  // entry: {//by itdos.com
  //   'microi.net': './src/diy/index.js',
  // },
  // filename: 'microi.net.js',
  css: {
    extract: false
  },
  /**
   * You will need to set publicPath if you plan to deploy your site under a sub path,
   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,
   * then publicPath should be set to "/bar/".
   * In most cases please use '/' !!!
   * Detail: https://cli.vuejs.org/config/#publicpath
   */
  publicPath: '/',
  outputDir: 'dist/microi.net/dist',
  // assetsDir: 'static',
  lintOnSave: process.env.NODE_ENV === 'development',
  productionSourceMap: false,
  
  devServer: {
    watchOptions: {
      ignored: ['node_modules']//解决mac cpu占用高？
    },
    port: port,
    open: true,
    overlay: {
      warnings: false,
      errors: true
    }
    // before: require('./mock/mock-server.js')
  },
  configureWebpack: {
    devtool: 'source-map', // 开发环境使用 source-map
    entry: {
      app: './src/views/diy/index.js'
    },
    output: {
      filename: 'microi.net.js',
      path: path.resolve(__dirname, 'dist/microi.net/dist')
    },
    // provide the app's title in webpack's name field, so that
    // it can be accessed in index.html to inject the correct title.
    name: name,
    resolve: {
      alias: {
        '@': resolve('src'),
        '@microi': path.resolve(__dirname, 'node_modules/microi.net'),
        bootstrap: path.resolve(__dirname, 'node_modules/bootstrap')
      },
      extensions: ['.js', '.vue', '.json'],
    },
    externals: {
      // 确保外部依赖项正确处理
      bootstrap: 'bootstrap',
    },
    //以下为MonacoEditor需要
    plugins: [
        new MonacoWebpackPlugin({
          languages: ['javascript'] //, 'css', 'html' , 'typescript', 'json' available options are documented at https://github.com/Microsoft/monaco-editor-webpack-plugin#options
        })
    ],
    optimization: {
      minimize: true, // 是否压缩
    },
    //-----end
  },
  chainWebpack(config) {

    config.module
      .rule('js')
      .use('babel-loader')
      .tap(options => {
        // 修改 babel-loader 选项
        return options;
      });

    config.plugins.delete('html');
    config.plugins.delete('preload');
    
    // it can improve the speed of the first screen, it is recommended to turn on preload
    //--这里是因为npm run lib报错才注释
    // config.plugin('preload').tap(() => [
    //   {
    //     rel: 'preload',
    //     // to ignore runtime.js
    //     // https://github.com/vuejs/vue-cli/blob/dev/packages/@vue/cli-service/lib/config/app.js#L171
    //     fileBlacklist: [/\.map$/, /hot-update\.js$/, /runtime\..*\.js$/],
    //     include: 'initial'
    //   }
    // ])
    //--这里是因为npm run lib报错才注释

    // when there are many pages, it will cause too many meaningless requests
    config.plugins.delete('prefetch')

    // set svg-sprite-loader
    config.module
      .rule('svg')
      .exclude.add(resolve('src/icons'))
      .end()
    config.module
      .rule('icons')
      .test(/\.svg$/)
      .include.add(resolve('src/icons'))
      .end()
      .use('svg-sprite-loader')
      .loader('svg-sprite-loader')
      .options({
        symbolId: 'icon-[name]'
      })
      .end()

    // config
      // .when(process.env.NODE_ENV !== 'development',
      //   config => {
      //     config
      //       .plugin('ScriptExtHtmlWebpackPlugin')
      //       .after('html')
      //       .use('script-ext-html-webpack-plugin', [{
      //       // `runtime` must same as runtimeChunk name. default is `runtime`
      //         inline: /runtime\..*\.js$/
      //       }])
      //       .end()
      //     config
      //       .optimization.splitChunks({
      //         chunks: 'all',
      //         cacheGroups: {
      //           libs: {
      //             name: 'chunk-libs',
      //             test: /[\\/]node_modules[\\/]/,
      //             priority: 10,
      //             chunks: 'initial' // only package third parties that are initially dependent
      //           },
      //           elementUI: {
      //             name: 'chunk-elementUI', // split elementUI into a single package
      //             priority: 20, // the weight needs to be larger than libs and app or it will be packaged into libs or app
      //             test: /[\\/]node_modules[\\/]_?element-ui(.*)/ // in order to adapt to cnpm
      //           },
      //           commons: {
      //             name: 'chunk-commons',
      //             test: resolve('src/components'), // can customize your rules
      //             minChunks: 3, //  minimum common number
      //             priority: 5,
      //             reuseExistingChunk: true
      //           }
      //         }
      //       })
      //     https:// webpack.js.org/configuration/optimization/#optimizationruntimechunk
      //     config.optimization.runtimeChunk('single');
      //     config.optimization.minimize(true);
      //   }
      // )
  }
}
